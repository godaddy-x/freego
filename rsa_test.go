package main

import (
	"fmt"
	"github.com/godaddy-x/freego/component/gorsa"
	"testing"
)

const keyfile = "testrsa.key"
const pemfile = "testrsa.pem"
const testmsg = "我爱中国test123"

const prikeyhex = "2d2d2d2d2d424547494e205253412050524956415445204b45592d2d2d2d2d0a4d4949456f77494241414b43415145417954612f716c7356722b6e6f444b465764544d3979396f704e767736525844447471787a47362f4c6f5256704d4e532b0a316843376c336a726e5259466e655044514a357865373847566c377344772b43756a4d373073367561626d30684753587136303361396654506a556f6a5755740a733258714c444b666e537475356b746c5765465a5976506838345230374632524b4378716d6436513958636477316d4f44356d792b444e2f6a4c5a6a437335470a566d456939394c345037747265786f6b4562594e2f3551466a7a4f77356e4758675336766a345365586679526c6e5075424a766f697a626c42685352615969460a4470394d476b456779536f54556651713041673978453749357a67504755794e64395361676f6a7959352b54474d586e786b2b72786b716e7a5478344a3044300a32753770596d624c3171497144725957647541597a6c76436e642f4c536e4e4d7a5577614351494441514142416f494241442f47587046384e532b416a3941520a41766f36743464354b6a3848537544666b4f6a42562b71616d59774134557063342b2b74646766596837564f575a466c73326b7a7a76784e323542636e6131590a57544c7a4d693771323155665378763756696450793555653378474566386e7847373855756c67763432394a614f6b4e564a35635570794f654474613745524f0a6b38654c374733416f576c727937387a4431666165324d337a32476c6a58424774482b71524975794a504a576a6a6b6d47637357794e30454d3437326e5330790a4879786c42594a3579534d395673445473566a703145564d6364656b58676d59702f36536b3779495331596f7472713076313777454d41773532537a6a6535720a786a63495a2f795a696a724f6d47336f5832582b4758682f37386a556a5441433436623748516d306f79782b7a544c706b36594e5a4b696b776b5178337374330a49507434666b454367594541353333666c376a7333524d67546a53323052563370632f78477159526836445852517433537877324f466470454e6270434b777a0a476f527170503855787746596a694e2b586b764d553650714c573479476e2b573774417a74576470554977385834464368333748346c6d6e3841524c5a53516c0a756537396d7049574b452b33306c4372786c6a514d487555414d31376166396c2f6a54725a7878745975574a6a4233486f6c31336d49304367594541336f52420a474f743147385433656143586338304f586b77326c4d413757567a6f58386570636c4a375533776c643246756e494930785668534f714b6e4f756652727332730a457168465178767470303857594a6c75745a486e6b4c44673132466e6e54736b63464a4c59317378523467766e45612b72597079714d4b3071734f45464b61320a32784d526d2b656b4448426e6a686e486156736951724f38312f354a7344376a4256756d506d3043675941645555653841324f634c417676573657376e53686d0a43347652674337414b704b59332f6266774662746b38527571596b6833413073307042664452386f685063654b556962304b573041684a715a6f5a5a374d62450a7741474d652b684f6c7a51654e46536b7246334d514f6150387a744a4e2b612f515a4645766a4f6f4c314273686d4c36333879654630694c51587262316369700a42544b3741464b714c372f5879763235686e546245514b426751434d3570772b426d4c7169616658615a7864704a77546c426a2f796c594b6553316638524e590a492b695a3763506675312b4b56567a4c46656c4433646b64454d775337344f6c634d34693935316555314d744b687354654764306c4c786252662b52625844650a6577336e785567494c7246504f50446d2f514d723339623952723774514d414c4b79443859777262495a5a425167756d714347697353504564653339583254720a384b50745a514b4267486531437845764f7a423970473148543066425270496f5558436d546e4a764973656a6b49417848626945674145687935526f447030580a2f784457414f43346e325a734731574b50614761384c346163582f6d6c4b6f364967766e2b2f4b43594765505a684f64696b7955486337344b766e46323065700a4842554d5037314b7966365a2f75725a4f5a384c6c35475463354b4e6c76546a774370344e56725a3235684835334b5468316f410a2d2d2d2d2d454e44205253412050524956415445204b45592d2d2d2d2d0a"
const pubkeyhex = "2d2d2d2d2d424547494e20525341205055424c49434b204b45592d2d2d2d2d0a4d49494243674b43415145417954612f716c7356722b6e6f444b465764544d3979396f704e767736525844447471787a47362f4c6f5256704d4e532b316843370a6c336a726e5259466e655044514a357865373847566c377344772b43756a4d373073367561626d30684753587136303361396654506a556f6a575574733258710a4c444b666e537475356b746c5765465a5976506838345230374632524b4378716d6436513958636477316d4f44356d792b444e2f6a4c5a6a43733547566d45690a39394c345037747265786f6b4562594e2f3551466a7a4f77356e4758675336766a345365586679526c6e5075424a766f697a626c42685352615969464470394d0a476b456779536f54556651713041673978453749357a67504755794e64395361676f6a7959352b54474d586e786b2b72786b716e7a5478344a304430327537700a596d624c3171497144725957647541597a6c76436e642f4c536e4e4d7a55776143514944415141420a2d2d2d2d2d454e4420525341205055424c49434b204b45592d2d2d2d2d0a"

func BenchmarkRSA(b *testing.B) {
	b.StopTimer()
	b.StartTimer()
	for i := 0; i < b.N; i++ { //use b.N for looping
		obj := &gorsa.RsaObj{}
		if err := obj.LoadRsaKeyFileHex(prikeyhex); err != nil {
			panic(err)
		}
	}
}

func TestRsaCreateFile(t *testing.T) {
	obj := &gorsa.RsaObj{}
	obj.CreateRsaFile(keyfile, pemfile)
}

func TestRsaCreateFileHex(t *testing.T) {
	obj := &gorsa.RsaObj{}
	prikey, pubkey, err := obj.CreateRsaFileHex()
	if err != nil {
		panic(err)
	}
	fmt.Println("私钥: ", prikey)
	fmt.Println("公钥: ", pubkey)
}

func TestRsaLoadFile(t *testing.T) {
	obj := &gorsa.RsaObj{}
	if err := obj.LoadRsaFile(keyfile); err != nil {
		panic(err)
	}
}

func TestRsaLoadFileHex(t *testing.T) {
	obj := &gorsa.RsaObj{}
	if err := obj.LoadRsaKeyFileHex(prikeyhex); err != nil {
		panic(err)
	}
	sig, err := obj.SignBySHA256(testmsg)
	fmt.Println(sig, err)
	fmt.Println(obj.VerifyBySHA256(testmsg, sig))
}

func TestRsaPubkeyEncrypt(t *testing.T) {
	obj := &gorsa.RsaObj{}
	if err := obj.LoadRsaFile(keyfile); err != nil {
		panic(err)
	}
	res, err := obj.Encrypt((testmsg))
	if err != nil {
		panic(err)
	}
	fmt.Println("RSA公钥加密结果: ", res)
}

func TestRsaPrikeyDecrypt(t *testing.T) {
	obj := &gorsa.RsaObj{}
	if err := obj.LoadRsaFile(keyfile); err != nil {
		panic(err)
	}
	res, err := obj.Encrypt((testmsg))
	if err != nil {
		panic(err)
	}
	fmt.Println("RSA公钥加密结果: ", res)
	res2, err := obj.Decrypt(res)
	if err != nil {
		panic(err)
	}
	fmt.Println("RSA私钥解密结果: ", string(res2))
}

func TestRsaSign(t *testing.T) {
	obj := &gorsa.RsaObj{}
	if err := obj.LoadRsaFile(keyfile); err != nil {
		panic(err)
	}
	res, err := obj.SignBySHA256((testmsg))
	if err != nil {
		panic(err)
	}
	fmt.Println("RSA私钥签名结果: ", res)
}

func TestRsaVerify(t *testing.T) {
	obj := &gorsa.RsaObj{}
	if err := obj.LoadRsaFile(keyfile); err != nil {
		panic(err)
	}
	res, err := obj.SignBySHA256((testmsg))
	if err != nil {
		panic(err)
	}
	if err := obj.VerifyBySHA256((testmsg), res); err == nil {
		fmt.Println("RSA公钥验签结果: ", err == nil)
	} else {
		panic(err)
	}
}
