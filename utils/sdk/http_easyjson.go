// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package sdk

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6252c418DecodeGithubComGodaddyXFreegoUtilsSdk(in *jlexer.Lexer, out *HttpSDK) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "Debug":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Debug = bool(in.Bool())
			}
		case "Domain":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Domain = string(in.String())
			}
		case "AuthDomain":
			if in.IsNull() {
				in.Skip()
			} else {
				out.AuthDomain = string(in.String())
			}
		case "KeyPath":
			if in.IsNull() {
				in.Skip()
			} else {
				out.KeyPath = string(in.String())
			}
		case "LoginPath":
			if in.IsNull() {
				in.Skip()
			} else {
				out.LoginPath = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6252c418EncodeGithubComGodaddyXFreegoUtilsSdk(out *jwriter.Writer, in HttpSDK) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Debug\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Debug))
	}
	{
		const prefix string = ",\"Domain\":"
		out.RawString(prefix)
		out.String(string(in.Domain))
	}
	{
		const prefix string = ",\"AuthDomain\":"
		out.RawString(prefix)
		out.String(string(in.AuthDomain))
	}
	{
		const prefix string = ",\"KeyPath\":"
		out.RawString(prefix)
		out.String(string(in.KeyPath))
	}
	{
		const prefix string = ",\"LoginPath\":"
		out.RawString(prefix)
		out.String(string(in.LoginPath))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HttpSDK) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6252c418EncodeGithubComGodaddyXFreegoUtilsSdk(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HttpSDK) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6252c418EncodeGithubComGodaddyXFreegoUtilsSdk(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HttpSDK) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6252c418DecodeGithubComGodaddyXFreegoUtilsSdk(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HttpSDK) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6252c418DecodeGithubComGodaddyXFreegoUtilsSdk(l, v)
}
func easyjson6252c418DecodeGithubComGodaddyXFreegoUtilsSdk1(in *jlexer.Lexer, out *AuthToken) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "token":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Token = string(in.String())
			}
		case "secret":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Secret = string(in.String())
			}
		case "expired":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Expired = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6252c418EncodeGithubComGodaddyXFreegoUtilsSdk1(out *jwriter.Writer, in AuthToken) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"token\":"
		out.RawString(prefix[1:])
		out.String(string(in.Token))
	}
	{
		const prefix string = ",\"secret\":"
		out.RawString(prefix)
		out.String(string(in.Secret))
	}
	{
		const prefix string = ",\"expired\":"
		out.RawString(prefix)
		out.Int64(int64(in.Expired))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AuthToken) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6252c418EncodeGithubComGodaddyXFreegoUtilsSdk1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AuthToken) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6252c418EncodeGithubComGodaddyXFreegoUtilsSdk1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AuthToken) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6252c418DecodeGithubComGodaddyXFreegoUtilsSdk1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AuthToken) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6252c418DecodeGithubComGodaddyXFreegoUtilsSdk1(l, v)
}
