// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package jwt

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD1f11d7eDecodeGithubComGodaddyXFreegoUtilsJwt(in *jlexer.Lexer, out *Subject) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "Header":
			if in.IsNull() {
				in.Skip()
				out.Header = nil
			} else {
				if out.Header == nil {
					out.Header = new(Header)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					(*out.Header).UnmarshalEasyJSON(in)
				}
			}
		case "Payload":
			if in.IsNull() {
				in.Skip()
				out.Payload = nil
			} else {
				if out.Payload == nil {
					out.Payload = new(Payload)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					(*out.Payload).UnmarshalEasyJSON(in)
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD1f11d7eEncodeGithubComGodaddyXFreegoUtilsJwt(out *jwriter.Writer, in Subject) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Header\":"
		out.RawString(prefix[1:])
		if in.Header == nil {
			out.RawString("null")
		} else {
			(*in.Header).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"Payload\":"
		out.RawString(prefix)
		if in.Payload == nil {
			out.RawString("null")
		} else {
			(*in.Payload).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Subject) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD1f11d7eEncodeGithubComGodaddyXFreegoUtilsJwt(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Subject) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD1f11d7eEncodeGithubComGodaddyXFreegoUtilsJwt(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Subject) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD1f11d7eDecodeGithubComGodaddyXFreegoUtilsJwt(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Subject) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD1f11d7eDecodeGithubComGodaddyXFreegoUtilsJwt(l, v)
}
func easyjsonD1f11d7eDecodeGithubComGodaddyXFreegoUtilsJwt1(in *jlexer.Lexer, out *SimplePayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "Sub":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Sub = string(in.String())
			}
		case "Exp":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Exp = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD1f11d7eEncodeGithubComGodaddyXFreegoUtilsJwt1(out *jwriter.Writer, in SimplePayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Sub\":"
		out.RawString(prefix[1:])
		out.String(string(in.Sub))
	}
	{
		const prefix string = ",\"Exp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Exp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SimplePayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD1f11d7eEncodeGithubComGodaddyXFreegoUtilsJwt1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SimplePayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD1f11d7eEncodeGithubComGodaddyXFreegoUtilsJwt1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SimplePayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD1f11d7eDecodeGithubComGodaddyXFreegoUtilsJwt1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SimplePayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD1f11d7eDecodeGithubComGodaddyXFreegoUtilsJwt1(l, v)
}
func easyjsonD1f11d7eDecodeGithubComGodaddyXFreegoUtilsJwt2(in *jlexer.Lexer, out *Payload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "sub":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Sub = string(in.String())
			}
		case "aud":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Aud = string(in.String())
			}
		case "iss":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Iss = string(in.String())
			}
		case "dev":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Dev = string(in.String())
			}
		case "jti":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Jti = string(in.String())
			}
		case "ext":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Ext = string(in.String())
			}
		case "iat":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Iat = int64(in.Int64())
			}
		case "exp":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Exp = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD1f11d7eEncodeGithubComGodaddyXFreegoUtilsJwt2(out *jwriter.Writer, in Payload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"sub\":"
		out.RawString(prefix[1:])
		out.String(string(in.Sub))
	}
	{
		const prefix string = ",\"aud\":"
		out.RawString(prefix)
		out.String(string(in.Aud))
	}
	{
		const prefix string = ",\"iss\":"
		out.RawString(prefix)
		out.String(string(in.Iss))
	}
	{
		const prefix string = ",\"dev\":"
		out.RawString(prefix)
		out.String(string(in.Dev))
	}
	{
		const prefix string = ",\"jti\":"
		out.RawString(prefix)
		out.String(string(in.Jti))
	}
	{
		const prefix string = ",\"ext\":"
		out.RawString(prefix)
		out.String(string(in.Ext))
	}
	{
		const prefix string = ",\"iat\":"
		out.RawString(prefix)
		out.Int64(int64(in.Iat))
	}
	{
		const prefix string = ",\"exp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Exp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Payload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD1f11d7eEncodeGithubComGodaddyXFreegoUtilsJwt2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Payload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD1f11d7eEncodeGithubComGodaddyXFreegoUtilsJwt2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Payload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD1f11d7eDecodeGithubComGodaddyXFreegoUtilsJwt2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Payload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD1f11d7eDecodeGithubComGodaddyXFreegoUtilsJwt2(l, v)
}
func easyjsonD1f11d7eDecodeGithubComGodaddyXFreegoUtilsJwt3(in *jlexer.Lexer, out *JwtConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "TokenKey":
			if in.IsNull() {
				in.Skip()
			} else {
				out.TokenKey = string(in.String())
			}
		case "TokenAlg":
			if in.IsNull() {
				in.Skip()
			} else {
				out.TokenAlg = string(in.String())
			}
		case "TokenTyp":
			if in.IsNull() {
				in.Skip()
			} else {
				out.TokenTyp = string(in.String())
			}
		case "TokenExp":
			if in.IsNull() {
				in.Skip()
			} else {
				out.TokenExp = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD1f11d7eEncodeGithubComGodaddyXFreegoUtilsJwt3(out *jwriter.Writer, in JwtConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TokenKey\":"
		out.RawString(prefix[1:])
		out.String(string(in.TokenKey))
	}
	{
		const prefix string = ",\"TokenAlg\":"
		out.RawString(prefix)
		out.String(string(in.TokenAlg))
	}
	{
		const prefix string = ",\"TokenTyp\":"
		out.RawString(prefix)
		out.String(string(in.TokenTyp))
	}
	{
		const prefix string = ",\"TokenExp\":"
		out.RawString(prefix)
		out.Int64(int64(in.TokenExp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v JwtConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD1f11d7eEncodeGithubComGodaddyXFreegoUtilsJwt3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v JwtConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD1f11d7eEncodeGithubComGodaddyXFreegoUtilsJwt3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *JwtConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD1f11d7eDecodeGithubComGodaddyXFreegoUtilsJwt3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *JwtConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD1f11d7eDecodeGithubComGodaddyXFreegoUtilsJwt3(l, v)
}
func easyjsonD1f11d7eDecodeGithubComGodaddyXFreegoUtilsJwt4(in *jlexer.Lexer, out *Header) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		switch key {
		case "alg":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Alg = string(in.String())
			}
		case "typ":
			if in.IsNull() {
				in.Skip()
			} else {
				out.Typ = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD1f11d7eEncodeGithubComGodaddyXFreegoUtilsJwt4(out *jwriter.Writer, in Header) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"alg\":"
		out.RawString(prefix[1:])
		out.String(string(in.Alg))
	}
	{
		const prefix string = ",\"typ\":"
		out.RawString(prefix)
		out.String(string(in.Typ))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Header) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD1f11d7eEncodeGithubComGodaddyXFreegoUtilsJwt4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Header) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD1f11d7eEncodeGithubComGodaddyXFreegoUtilsJwt4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Header) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD1f11d7eDecodeGithubComGodaddyXFreegoUtilsJwt4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Header) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD1f11d7eDecodeGithubComGodaddyXFreegoUtilsJwt4(l, v)
}
