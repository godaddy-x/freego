// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: consul/grpcx/proto/pub_worker.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PubWorkerClient is the client API for PubWorker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PubWorkerClient interface {
	GenerateId(ctx context.Context, in *GenerateIdReq, opts ...grpc.CallOption) (*GenerateIdRes, error)
	Authorize(ctx context.Context, in *AuthorizeReq, opts ...grpc.CallOption) (*AuthorizeRes, error)
	PublicKey(ctx context.Context, in *PublicKeyReq, opts ...grpc.CallOption) (*PublicKeyRes, error)
}

type pubWorkerClient struct {
	cc grpc.ClientConnInterface
}

func NewPubWorkerClient(cc grpc.ClientConnInterface) PubWorkerClient {
	return &pubWorkerClient{cc}
}

func (c *pubWorkerClient) GenerateId(ctx context.Context, in *GenerateIdReq, opts ...grpc.CallOption) (*GenerateIdRes, error) {
	out := new(GenerateIdRes)
	err := c.cc.Invoke(ctx, "/pub_worker.PubWorker/GenerateId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubWorkerClient) Authorize(ctx context.Context, in *AuthorizeReq, opts ...grpc.CallOption) (*AuthorizeRes, error) {
	out := new(AuthorizeRes)
	err := c.cc.Invoke(ctx, "/pub_worker.PubWorker/Authorize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubWorkerClient) PublicKey(ctx context.Context, in *PublicKeyReq, opts ...grpc.CallOption) (*PublicKeyRes, error) {
	out := new(PublicKeyRes)
	err := c.cc.Invoke(ctx, "/pub_worker.PubWorker/PublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PubWorkerServer is the server API for PubWorker service.
// All implementations must embed UnimplementedPubWorkerServer
// for forward compatibility
type PubWorkerServer interface {
	GenerateId(context.Context, *GenerateIdReq) (*GenerateIdRes, error)
	Authorize(context.Context, *AuthorizeReq) (*AuthorizeRes, error)
	PublicKey(context.Context, *PublicKeyReq) (*PublicKeyRes, error)
	mustEmbedUnimplementedPubWorkerServer()
}

// UnimplementedPubWorkerServer must be embedded to have forward compatible implementations.
type UnimplementedPubWorkerServer struct {
}

func (UnimplementedPubWorkerServer) GenerateId(context.Context, *GenerateIdReq) (*GenerateIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateId not implemented")
}
func (UnimplementedPubWorkerServer) Authorize(context.Context, *AuthorizeReq) (*AuthorizeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authorize not implemented")
}
func (UnimplementedPubWorkerServer) PublicKey(context.Context, *PublicKeyReq) (*PublicKeyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicKey not implemented")
}
func (UnimplementedPubWorkerServer) mustEmbedUnimplementedPubWorkerServer() {}

// UnsafePubWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PubWorkerServer will
// result in compilation errors.
type UnsafePubWorkerServer interface {
	mustEmbedUnimplementedPubWorkerServer()
}

func RegisterPubWorkerServer(s grpc.ServiceRegistrar, srv PubWorkerServer) {
	s.RegisterService(&PubWorker_ServiceDesc, srv)
}

func _PubWorker_GenerateId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubWorkerServer).GenerateId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pub_worker.PubWorker/GenerateId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubWorkerServer).GenerateId(ctx, req.(*GenerateIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PubWorker_Authorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubWorkerServer).Authorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pub_worker.PubWorker/Authorize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubWorkerServer).Authorize(ctx, req.(*AuthorizeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PubWorker_PublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubWorkerServer).PublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pub_worker.PubWorker/PublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubWorkerServer).PublicKey(ctx, req.(*PublicKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PubWorker_ServiceDesc is the grpc.ServiceDesc for PubWorker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PubWorker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pub_worker.PubWorker",
	HandlerType: (*PubWorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateId",
			Handler:    _PubWorker_GenerateId_Handler,
		},
		{
			MethodName: "Authorize",
			Handler:    _PubWorker_Authorize_Handler,
		},
		{
			MethodName: "PublicKey",
			Handler:    _PubWorker_PublicKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "consul/grpcx/proto/pub_worker.proto",
}
